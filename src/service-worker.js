// src/service-worker.js
/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';

// This allows the web app to trigger skipWaiting via
clientsClaim();

// Precache all of the assets generated by your build process
// Their URLs are injected into the manifest variable below
// This variable must be present somewhere in your service worker file
const WB_MANIFEST = self.__WB_MANIFEST;
precacheAndRoute(WB_MANIFEST);

// Cache the diagnostic data JSON files
registerRoute(
  ({ url }) => url.pathname.startsWith('/data/diagnostic-data'),
  new CacheFirst({
    cacheName: 'diagnostic-data-cache',
    plugins: [
      new ExpirationPlugin({
        // Keep at most 50 entries
        maxEntries: 50,
        // Don't keep any entries for more than 30 days
        maxAgeSeconds: 30 * 24 * 60 * 60,
      }),
    ],
  })
);

// Cache the OpenAI responses for offline use
registerRoute(
  ({ url }) => url.pathname.includes('/api/diagnose'),
  new StaleWhileRevalidate({
    cacheName: 'openai-responses-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 1 week
      }),
    ],
  })
);

// For non-API routes, serve the app shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false for URLs that should not be handled by the cache
  ({ request, url }) => {
    if (request.mode !== 'navigate') {
      return false;
    }
    
    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }
    
    // If this looks like a URL for a resource, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Handle offline fallbacks
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate' || 
     (event.request.method === 'GET' && 
      event.request.headers.get('accept').includes('text/html'))) {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
  }
});

// This allows the app to work offline by handling requests
// even when there's no network connection
self.addEventListener('fetch', (event) => {
  // Skip cross-origin requests
  if (event.request.url.startsWith(self.location.origin)) {
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        if (cachedResponse) {
          return cachedResponse;
        }
        
        return fetch(event.request).then((response) => {
          // If we got a valid response, cache it
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          
          const responseToCache = response.clone();
          caches.open('dynamic-cache').then((cache) => {
            cache.put(event.request, responseToCache);
          });
          
          return response;
        }).catch(() => {
          // If both network and cache fail, return the offline page for navigation requests
          if (event.request.mode === 'navigate') {
            return caches.match('/offline.html');
          }
          
          // For API requests, return a custom offline response
          if (event.request.url.includes('/api/')) {
            return new Response(
              JSON.stringify({ 
                error: true, 
                message: 'You are offline. This diagnostic result is from cached data and may not be complete.',
                offlineMode: true 
              }),
              { 
                headers: { 'Content-Type': 'application/json' } 
              }
            );
          }
          
          return new Response('Offline content not available');
        });
      })
    );
  }
});
