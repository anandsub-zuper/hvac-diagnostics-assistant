// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the HVAC diagnostic data with network-first strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/getDiagnostics'),
  new NetworkFirst({
    cacheName: 'diagnostic-data',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 24 * 60 * 60, // 1 day
      }),
    ],
  })
);

// Cache the OpenAI API responses with stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/diagnose'),
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 1 week
      }),
    ],
  })
);

// Cache reference materials and static data with cache-first strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/data/'),
  new CacheFirst({
    cacheName: 'static-data',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Listen for push events (for future notifications)
self.addEventListener('push', (event) => {
  const title = 'HVAC Diagnostics Assistant';
  const options = {
    body: event.data.text() || 'New diagnostic information available',
    icon: 'logo192.png',
    badge: 'logo192.png'
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

// Background sync for diagnostics (for future use)
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-diagnostics') {
    event.waitUntil(syncDiagnostics());
  }
});

// Offline fallback response for API requests
self.addEventListener('fetch', (event) => {
  if (event.request.url.includes('/api/') && !navigator.onLine) {
    // Try to match the request in the cache
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        if (cachedResponse) {
          return cachedResponse;
        }
        
        // If not found in cache, and we're offline, return a custom response
        if (event.request.url.includes('/api/diagnose')) {
          return new Response(
            JSON.stringify({
              offlineMode: true,
              message: "You're currently offline. Using limited diagnostic capabilities.",
              source: "offline"
            }),
            { headers: { 'Content-Type': 'application/json' } }
          );
        }
        
        // Default offline response for API requests
        return new Response(
          JSON.stringify({
            error: true,
            message: "You're offline. Please connect to the internet to use this feature."
          }),
          { headers: { 'Content-Type': 'application/json' } }
        );
      })
    );
  }
});

// Placeholder function for syncing diagnostics when online
async function syncDiagnostics() {
  try {
    // Get saved diagnostics from IndexedDB or localStorage
    const offlineDiagnostics = await getOfflineDiagnosticsFromStorage();
    
    // Send each diagnostic to server when back online
    if (offlineDiagnostics && offlineDiagnostics.length > 0) {
      // Implementation would depend on your storage method
      console.log('Syncing diagnostics data...');
    }
  } catch (error) {
    console.error('Error syncing diagnostics:', error);
  }
}

// Placeholder function to get offline diagnostics
async function getOfflineDiagnosticsFromStorage() {
  // Implementation would depend on your storage method
  // Could use localStorage or IndexedDB
  try {
    const savedItems = localStorage.getItem('pendingSyncDiagnostics');
    return savedItems ? JSON.parse(savedItems) : [];
  } catch (error) {
    console.error('Error getting offline diagnostics:', error);
    return [];
  }
}
